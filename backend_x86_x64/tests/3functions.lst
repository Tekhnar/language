     1                                  ; Written on nasm + ld + WinAPI
     2                                  
     3                                  ;	./nasm 3functions.asm -f win64 -l 3functions.lst
     4                                  ;	./ld64 3functions.obj user32.dll kernel32.dll
     5                                  
     6                                  extern GetStdHandle
     7                                  extern WriteConsoleA
     8                                  extern ReadConsoleA
     9                                  extern ExitProcess
    10                                  
    11                                  global Start
    12                                  
    13                                  section .text
    14 00000000 90                      	nop
    15 00000001 90                      	nop
    16 00000002 90                      	nop
    17 00000003 90                      	nop
    18 00000004 90                      	nop
    19 00000005 90                      	nop
    20 00000006 90                      	nop
    21 00000007 90                      	nop
    22 00000008 90                      	nop
    23 00000009 90                      	nop
    24 0000000A 90                      	nop
    25 0000000B 90                      	nop
    26 0000000C 90                      	nop
    27 0000000D 90                      	nop
    28 0000000E 90                      	nop
    29 0000000F 90                      	nop
    30                                  scan:    
    31                                  ;---------------------------------------
    32                                  ;	Read in console number with 
    33                                  ;	fixed accuracy 
    34                                  ;	Ret: RAX	input value
    35                                  ;---------------SCAN--------------------
    36                                  	
    37 00000010 55                      		push rbp
    38 00000011 54                      		push rsp
    39 00000012 5D                      		pop  rbp
    40                                  		
    41                                  		
    42 00000013 4883E4F0                		and rsp, ~0xf
    43                                  		
    44 00000017 4883EC20                		sub rsp, 32
    45 0000001B 48C7C1F6FFFFFF          		mov rcx, -10
    46 00000022 E8(00000000)            		call GetStdHandle
    47                                  		
    48 00000027 4889C1                  		mov rcx, rax
    49 0000002A 4883EC30                		sub rsp, 32 + 16
    50                                  		
    51 0000002E 48C744242000000000      		mov qword [rsp + 32], 0 	; fifth arguments in stack
    52 00000037 4C8D4C2430              		lea r9, [rsp + 48]
    53 0000003C 41B812000000            		mov r8, 18
    54                                  		
    55 00000042 488D542428              		lea rdx, [rsp + 40]
    56 00000047 E8(00000000)            		call ReadConsoleA
    57                                  		
    58                                  ;------------------------------
    59 0000004C FC                      		cld
    60                                  		
    61 0000004D 4831C0                  		xor rax, rax
    62 00000050 4D31C9                  		xor r9,  r9
    63 00000053 41B80A000000            		mov r8,  10
    64                                  		
    65 00000059 BB2E000000              		mov rbx, 0x2E
    66 0000005E B912000000              		mov rcx, 18
    67 00000063 488D742428              		lea rsi, [rsp + 40]
    68                                  		
    69                                  	;------------------------; Check minus
    70 00000068 4D31D2                  		xor r10, r10
    71 0000006B AC                      		lodsb
    72 0000006C 3C2D                    		cmp al, 45
    73 0000006E 7506                    		jne skip_min
    74 00000070 48FFC6                  		inc rsi
    75 00000073 49FFC2                  		inc r10
    76                                  	skip_min:
    77 00000076 48FFCE                  		dec rsi
    78                                  	;------------------------
    79                                  	while:
    80 00000079 AC                      		lodsb
    81 0000007A 38D8                    		cmp al, bl
    82 0000007C 7507                    		jne skip
    83 0000007E B902000000              		mov rcx, 2		; for numbers after point 1000.00
    84 00000083 EBF4                    		jmp while
    85                                  	skip:	
    86 00000085 4991                    		xchg rax, r9
    87                                  		
    88 00000087 490FAFC0                		imul rax, r8	; rdx *= 10
    89 0000008B 4991                    		xchg rax, r9
    90                                  		
    91 0000008D 2C30                    		sub al, 48
    92 0000008F 4901C1                  		add r9, rax
    93 00000092 E2E5                    		loop while
    94                                  		
    95 00000094 4983FA01                		cmp r10, 1
    96 00000098 7503                    		jne not_minus_scan
    97 0000009A 49F7D9                  		neg r9
    98                                  	not_minus_scan:	
    99                                  		
   100 0000009D 4C89C8                  		mov rax, r9		; return value in rcx if form  ddddd.dd
   101                                  		
   102 000000A0 55                      		push rbp
   103 000000A1 5C                      		pop  rsp
   104 000000A2 5D                      		pop  rbp
   105                                  		
   106 000000A3 C3                      		ret
   107                                  ;---------------SCAN--------------------
   108 000000A4 90                      	nop
   109 000000A5 90                      	nop
   110 000000A6 90                      	nop
   111 000000A7 90                      	nop
   112 000000A8 90                      	nop
   113                                  ;---------------------------------------
   114                                  ;	Write in console number with 
   115                                  ;	fixed accuracy 
   116                                  ;---------------------------------------
   117                                  ;	Entry:	RCX	value
   118                                  ;---------------PRINT-------------------
   119                                  Start:	
   120 000000A9 55                      		push rbp
   121 000000AA 54                      		push rsp
   122 000000AB 5D                      		pop  rbp
   123                                  		
   124 000000AC 4883E4F0                		and rsp, ~0xf
   125                                  		
   126 000000B0 488D7C24FF              		lea rdi, [rsp-1]
   127 000000B5 4D31D2                  		xor r10, r10
   128                                  		
   129 000000B8 FD                      		std
   130                                  		
   131 000000B9 B00A                    		mov al, 10		; add '\n' at the end of string
   132 000000BB AA                      		stosb
   133 000000BC 49FFC2                  		inc r10
   134                                  		
   135 000000BF 4889E6                  		mov rsi, rsp
   136 000000C2 4883EC30                		sub rsp, 32 + 16
   137 000000C6 4889C8                  		mov rax, rcx
   138                                  
   139 000000C9 4D31E4                  		xor r12, r12
   140                                  		
   141 000000CC 41B864000000            		mov r8, 100
   142 000000D2 B912000000              		mov rcx, 18
   143                                  		
   144 000000D7 BB0A000000              		mov rbx, 10
   145                                  		
   146 000000DC 4D31DB                  		xor r11, r11
   147 000000DF 4883F800                		cmp rax, 0
   148 000000E3 7D06                    		jge looop
   149 000000E5 48F7D8                  		neg rax
   150 000000E8 49FFC3                  		inc r11
   151                                  	;------------------
   152                                  	looop:					; write num as a string in reverse order
   153 000000EB 4983FA03                		cmp r10, 3
   154 000000EF 750F                    		jne continue
   155                                  		;============
   156 000000F1 4989C0                  		mov r8, rax
   157 000000F4 B82E000000              		mov rax, 0x2E
   158 000000F9 AA                      		stosb
   159 000000FA 49FFC2                  		inc r10	
   160 000000FD 4C89C0                  		mov rax, r8
   161                                  		;^^^^^^^^^^^^
   162                                  	continue:
   163 00000100 4899                    		cqo
   164 00000102 48F7FB                  		idiv rbx
   165 00000105 4892                    		xchg rax, rdx
   166 00000107 0430                    		add al, 48
   167 00000109 AA                      		stosb
   168 0000010A 4892                    		xchg rax, rdx
   169                                  		
   170 0000010C 49FFC2                  		inc r10			; it is counter for num in number
   171 0000010F 4883F800                		cmp rax, 0
   172 00000113 7402                    		je exit
   173                                  		
   174 00000115 E2D4                    		loop looop
   175                                  	;-------------------	
   176                                  	exit:
   177 00000117 4983FA03                		cmp r10, 3
   178 0000011B 7F0C                    		jg not_empty_start
   179                                  		;+++++++++++++++++
   180 0000011D B02E                    		mov al, 46
   181 0000011F AA                      		stosb
   182 00000120 49FFC2                  		inc r10
   183                                  		
   184 00000123 B030                    		mov al, 48
   185 00000125 AA                      		stosb
   186 00000126 49FFC2                  		inc r10
   187                                  		;+++++++++++++++++
   188                                  	not_empty_start:	
   189 00000129 4983FB01                		cmp r11, 1
   190 0000012D 7506                    		jne not_minus
   191 0000012F B02D                    		mov al, 45
   192 00000131 AA                      		stosb
   193 00000132 49FFC2                  		inc r10
   194                                  	not_minus:
   195 00000135 FC                      		cld
   196                                  		
   197 00000136 4883EC30                		sub rsp, 32 + 16
   198 0000013A 48C7C1F5FFFFFF          		mov rcx, -11
   199 00000141 E8(00000000)            		call GetStdHandle
   200                                  		
   201 00000146 4889F2                  		mov rdx, rsi
   202 00000149 4C29D2                  		sub rdx, r10
   203 0000014C 4D89D0                  		mov r8,  r10
   204 0000014F 4889C1                  		mov rcx, rax
   205 00000152 48C744242000000000      		mov qword [rsp + 32], 0
   206 0000015B 4C8D4C2428              		lea r9, [rsp + 32 + 8]
   207                                  		
   208 00000160 E8(00000000)            		call WriteConsoleA
   209                                  		
   210 00000165 55                      		push rbp
   211 00000166 5C                      		pop  rsp
   212 00000167 5D                      		pop  rbp
   213                                  		
   214 00000168 C3                      		ret
   215                                  		
   216                                  ;---------------PRINT-------------------		
   217                                  		
   218 00000169 90                      	nop
   219 0000016A 90                      	nop
   220 0000016B 90                      	nop
   221 0000016C 90                      	nop
   222 0000016D 90                      	nop
   223                                  		
   224                                  ;	Exit from program
   225                                  ;-----------------EXIT------------------
   226                                  	Exit:
   227 0000016E 4831C9                  		xor rcx, rcx
   228 00000171 E8(00000000)            		call ExitProcess
